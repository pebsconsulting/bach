"""
Parses a Bach document and prints the result as a LaTeX document.

Partial implementation.

Usage:
    cat examples/article.bach | python3 python/bach2latex-simple.py > out.latex
    pdflatex out.latex
"""


import argparse
import bach
import datetime
import io
import sys
import textwrap


# w.r.t. https://en.wikibooks.org/wiki/LaTeX/Document_Structure#Document_classes
LATEX_DOCUMENT_CLASSES = (
    'article',  # for articles in scientific journals, presentations, short reports, program documentation, invitations, ...
    'IEEEtran', # for articles with the IEEE Transactions format.
    'proc',     # a class for proceedings based on the article class
    'report',   # for longer reports containing several chapters, small books, thesis, ...
    'book',     # for real books
    'slides',   # presentations
    'memoir',   # based on book class
    'letter',   # for writing letters
    'beamer',   # presentations
)

# w.r.t. http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters
LATEX_ESCAPES = [
    ('#', '\\#'),
    ('$', '\\$'),
    ('%', '\\%'),
    ('&', '\\&'),
    ('\\', '\\textbackslash{}'),
    ('^',  '\\textasciicircum{}'),
    ('_', '\\_'),
    ('{', '\\{'),
    ('}', '\\}'),
    ('~', '\\textasciitilde{}'),
]

def LatexEscape(s):
    for k,v in LATEX_ESCAPES:
        s = s.replace(k, v)
    return s


def NiceText(s):
    # Nice 80-column text from input text that may be indented horribly
    s = s.split()
    s = ' '.join(s)
    s = textwrap.wrap(s, 78)
    return '\n'.join(s)


def OneAttribute(attributes, attribute, default=None):
    # bach attributes are a dictionary mapping names to an array of zero or
    # more values. Sometimes we only want exactly one value.
    # If default is None and no value is given, raises a KeyError
    value = attributes.get(attribute)

    if value is not None:
        if len(value) == 1:
            value = value[0]
            if value is not None:
                return value
            else:
                raise ValueError("Expected a non-None value for %s" % attribute)
        else:
            raise ValueError("Expected exactly one value for %s" % attribute)
    else:
        if default is None:
            raise KeyError("Expected attribute %s" % attribute)
        return default



def StartDocument(doc):
    # Top-level of document

    # a bach document tree is a 3-tuple
    label, attributes, subdocuments = doc

    assert label in LATEX_DOCUMENT_CLASSES, \
        "Document must begin with any valid LaTeX \documentclass: (%s)" % ', '.join(LATEX_DOCUMENT_CLASSES)

    title     = LatexEscape(OneAttribute(attributes, 'title', 'Untitled'))
    authors   = attributes.get('author', ['Anonymous'])
    authors   = list(map(LatexEscape, authors))
    date      = OneAttribute(attributes, 'date', '\\today')
    
    print("""
% Automatically generated by {generator}
%                         at {now}

\\documentclass{{{docClass}}}

\\title{{{title}}}
\\author{{{authors}}}
\\date{{{date}}}

\\begin{{document}}
 
\\maketitle

""".format(
        generator   = sys.argv[0],
        now         = datetime.datetime.now(),
        docClass    = label,
        title       = title,
        authors     = ' \\and '.join(authors),
        date        = date
    ))


    for x in StartSubdocuments(subdocuments):
        print(x)
        
    print ("\\end{document}")



def StartSubdocuments(subdocuments, sectionDepth=0, chapterDepth=0):
    for i in subdocuments:
        if isinstance(i, str):
            yield i
        else:
            yield from StartSubdocument(i, sectionDepth, chapterDepth)



def StartSubdocument(subdocument, sectionDepth=-1, chapterDepth=-1):

    # a bach subdocument is either a 3-tuple document tree or a single string
    # (the preceeding function checks for string instances)
    label, attributes, subdocuments = subdocument

    if label == 'section':
        assert sectionDepth >= 0, "section not allowed here"
        title = LatexEscape(OneAttribute(attributes, 'title', 'Untitled Section'))
        
        subs = 'sub'*sectionDepth
        yield "\\%ssection{%s}" % (subs, title)

        yield from StartSubdocuments(subdocuments, sectionDepth+1, chapterDepth)
    
    elif label == 'chapter':
        assert chapterDepth == 0, "chapter not allowed here"
        title = LatexEscape(OneAttribute(attributes, 'title', 'Untitled Chapter'))
        
        yield "\\chapter{%s}" % title

        yield from StartSubdocuments(subdocuments, sectionDepth, chapterDepth+1)

    elif label in ('b', 'p'):
        text = ' '.join([x for x in StartSubdocuments(subdocuments)])

        if label == 'b':
            yield '\\textbf{%s}' % text.strip()
        elif label == 'p':
            yield '%s\n' % NiceText(text.strip())
        else:
            yield LatexEscape(text)
    
    else:
        raise Exception("Don't know what to do with: %s" % label)





ap = argparse.ArgumentParser(
    description='Takes an "article style" bach document from stdin and writes a LaTeX document to stdout')
ap.add_argument('-e', '--encoding',  default='utf-8',
    help='specify the input character encoding (defaults to utf-8)')

args = ap.parse_args()

# Get the standard input binary buffer and wrap it in a file-object so that it
# decodes into a stream of Unicode characters from the specified encoding.
fp = io.TextIOWrapper(sys.stdin.buffer, encoding=args.encoding)

tree = bach.parse(fp)

StartDocument(tree)

