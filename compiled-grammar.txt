# Lines beginning with # are for human debugging information only
# Section: [Production Symbols]
#    S 0
#    IWS 1
#    WS 2
#    LF 3
#    C 4
#    LSQ 5
#    LDQ 6
#    LBQ 7
#    LSQESC 8
#    LDQESC 9
#    LBQESC 10
#    D 11
#    LD 12
#    ALD 13
#    XSCC 14
#    SDS 15
#    SD 16
#    LSD 17
#    ALSD 18
#    DSH 19
#    SDSH 20
#    RB 21
# Section: [Capture Semantics]
#    none 0
#    label 1
#    attribute 2
#    literal 3
#    assign 4
#    subdocStart 5
#    subdocEnd 6
#    shorthandSymbol 7
#    shorthandAttrib 8
# Section: [Terminals]
#    (20): 35, 61, 32, 9, 13, 10, 40, 41, 34, 39, 91, 93, 60, 62, 92, 39, 92, 91, 92, 34
# Section: [Terminal Sets]
#    special:none: 0 0-0
#    special:eof: 1 0-0
#    ss: 2 20-20
#    _dss: 3 1-15
#    iws: 3 2-5
#    ws: 4 2-6
#    bs: 5 14-15
#    lf: 6 5-6
#    sc: 7 0-20
#    oqt: 8 8-11
#    asgn: 9 1-2
#    scmt: 10 0-1
#    rb: 11 7-8
#    lb: 12 6-7
#    dq: 13 8-9
#    sq: 14 9-10
#    lbrace: 15 10-11
#    rbrace: 16 11-12
#    dqesc: 17 18-20
#    sqesc: 18 14-16
#    rbraceesc: 19 16-18
# Section: [Production Rules]
#    S => iws LF S
#        (0 => 3, [3 0])
#        if lookahead in lf (6)
#         as none (0)
#    S => iws IWS LF S
#        (0 => 3, [1 3 0])
#        if lookahead not in lf (6)
#         as none (0)
#    IWS => iws 
#        (1 => 3, [])
#        if lookahead not in iws (3)
#         as none (0)
#    IWS => iws IWS
#        (1 => 3, [1])
#        if lookahead in iws (3)
#         as none (0)
#    S => lf S
#        (0 => 6, [0])
#        if lookahead not in special:none (0)
#         as none (0)
#    LF => lf 
#        (3 => 6, [])
#        if lookahead not in special:none (0)
#         as none (0)
#    S => scmt C LF S
#        (0 => 10, [4 3 0])
#        if lookahead not in lf (6)
#         as none (0)
#    S => scmt LF S
#        (0 => 10, [3 0])
#        if lookahead in lf (6)
#         as none (0)
#    C => ¬lf 
#        (4 => ¬6, [])
#        if lookahead in lf (6)
#         as none (0)
#    C => ¬lf C
#        (4 => ¬6, [4])
#        if lookahead not in lf (6)
#         as none (0)
#    RB => rb 
#        (21 => 11, [])
#        if lookahead not in special:none (0)
#         as none (0)
#    WS => ws 
#        (2 => 4, [])
#        if lookahead not in ws (4)
#         as none (0)
#    WS => ws 
#        (2 => 4, [])
#        if lookahead in special:eof (1)
#         as none (0)
#    WS => ws WS
#        (2 => 4, [2])
#        if lookahead in ws (4)
#         as none (0)
#    XSCC => ¬sc 
#        (14 => ¬7, [])
#        if lookahead in sc (7)
#        [capture][capture end] as none (0)
#    XSCC => ¬sc XSCC
#        (14 => ¬7, [14])
#        if lookahead not in sc (7)
#        [capture] as none (0)
#    S => ¬sc WS D
#        (0 => ¬7, [2 11])
#        if lookahead in ws (4)
#        [capture][capture start][capture end] as label (1)
#    S => ¬sc XSCC D
#        (0 => ¬7, [14 11])
#        if lookahead not in sc (7)
#        [capture][capture start] as label (1)
#    D => ws D
#        (11 => 4, [11])
#        if lookahead not in ws (4)
#         as none (0)
#    D => ws 
#        (11 => 4, [])
#        if lookahead in special:eof (1)
#         as none (0)
#    D => ws WS D
#        (11 => 4, [2 11])
#        if lookahead in ws (4)
#         as none (0)
#    D => ss DSH D
#        (11 => 2, [19 11])
#        if lookahead not in sc (7)
#        [capture][capture start][capture end] as shorthandSymbol (7)
#    DSH => ¬sc 
#        (19 => ¬7, [])
#        if lookahead in sc (7)
#        [capture][capture start][capture end] as shorthandAttrib (8)
#    DSH => ¬sc XSCC
#        (19 => ¬7, [14])
#        if lookahead not in sc (7)
#        [capture][capture start] as shorthandAttrib (8)
#    SD => ss SDSH SD
#        (16 => 2, [20 16])
#        if lookahead not in sc (7)
#        [capture][capture start][capture end] as shorthandSymbol (7)
#    SDSH => ¬sc 
#        (20 => ¬7, [])
#        if lookahead in sc (7)
#        [capture][capture start][capture end] as shorthandAttrib (8)
#    SDSH => ¬sc XSCC
#        (20 => ¬7, [14])
#        if lookahead not in sc (7)
#        [capture][capture start] as shorthandAttrib (8)
#    D => ¬sc WS D
#        (11 => ¬7, [2 11])
#        if lookahead in ws (4)
#        [capture][capture start][capture end] as attribute (2)
#    D => ¬sc XSCC D
#        (11 => ¬7, [14 11])
#        if lookahead not in sc (7)
#        [capture][capture start] as attribute (2)
#    SD => ¬sc WS SD
#        (16 => ¬7, [2 16])
#        if lookahead in ws (4)
#        [capture][capture start][capture end] as attribute (2)
#    SD => ¬sc XSCC SD
#        (16 => ¬7, [14 16])
#        if lookahead not in sc (7)
#        [capture][capture start] as attribute (2)
#    SD => ¬sc SD
#        (16 => ¬7, [16])
#        if lookahead in rb (11)
#        [capture][capture start][capture end] as attribute (2)
#    D => ¬sc ALSD
#        (11 => ¬7, [18])
#        if lookahead in asgn (9)
#        [capture][capture start][capture end] as attribute (2)
#    D => asgn LD
#        (11 => 9, [12])
#        if lookahead not in special:none (0)
#        [capture][capture start][capture end] as assign (4)
#    ALD => asgn LD
#        (13 => 9, [12])
#        if lookahead not in special:none (0)
#        [capture][capture start][capture end] as assign (4)
#    LD => ws LD
#        (12 => 4, [12])
#        if lookahead not in special:none (0)
#         as none (0)
#    SD => ¬sc ALSD
#        (16 => ¬7, [18])
#        if lookahead in asgn (9)
#        [capture][capture start][capture end] as attribute (2)
#    SD => asgn LSD
#        (16 => 9, [17])
#        if lookahead not in special:none (0)
#        [capture][capture start][capture end] as assign (4)
#    ALSD => asgn LSD
#        (18 => 9, [17])
#        if lookahead not in special:none (0)
#        [capture][capture start][capture end] as assign (4)
#    LSD => ws LSD
#        (17 => 4, [17])
#        if lookahead not in special:none (0)
#         as none (0)
#    D => lb SDS D
#        (11 => 12, [15 11])
#        if lookahead not in special:none (0)
#        [capture][capture start][capture end] as subdocStart (5)
#    SDS => ws SDS
#        (15 => 4, [15])
#        if lookahead not in special:none (0)
#         as none (0)
#    SDS => ¬sc WS SD
#        (15 => ¬7, [2 16])
#        if lookahead in ws (4)
#        [capture][capture start][capture end] as label (1)
#    SDS => ¬sc XSCC SD
#        (15 => ¬7, [14 16])
#        if lookahead not in sc (7)
#        [capture][capture start] as label (1)
#    SDS => ¬sc SD
#        (15 => ¬7, [16])
#        if lookahead in rb (11)
#        [capture][capture start][capture end] as label (1)
#    SD => lb SDS SD
#        (16 => 12, [15 16])
#        if lookahead not in special:none (0)
#        [capture][capture start][capture end] as subdocStart (5)
#    SD => rb 
#        (16 => 11, [])
#        if lookahead not in special:none (0)
#        [capture][capture start][capture end] as subdocEnd (6)
#    SD => ws SD
#        (16 => 4, [16])
#        if lookahead not in special:none (0)
#         as none (0)
#    D => dq LDQ D
#        (11 => 13, [6 11])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    D => sq LSQ D
#        (11 => 14, [5 11])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    D => lbrace LBQ D
#        (11 => 15, [7 11])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    LD => dq LDQ D
#        (12 => 13, [6 11])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    LD => sq LSQ D
#        (12 => 14, [5 11])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    LD => lbrace LBQ D
#        (12 => 15, [7 11])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    SD => dq LDQ SD
#        (16 => 13, [6 16])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    SD => sq LSQ SD
#        (16 => 14, [5 16])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    SD => lbrace LBQ SD
#        (16 => 15, [7 16])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    LSD => dq LDQ SD
#        (17 => 13, [6 16])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    LSD => sq LSQ SD
#        (17 => 14, [5 16])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    LSD => lbrace LBQ SD
#        (17 => 15, [7 16])
#        if lookahead not in special:none (0)
#        [capture start] as literal (3)
#    LDQ => dq 
#        (6 => 13, [])
#        if lookahead not in special:none (0)
#        [capture end] as none (0)
#    LSQ => sq 
#        (5 => 14, [])
#        if lookahead not in special:none (0)
#        [capture end] as none (0)
#    LBQ => rbrace 
#        (7 => 16, [])
#        if lookahead not in special:none (0)
#        [capture end] as none (0)
#    LDQ => ¬dqesc LDQ
#        (6 => ¬17, [6])
#        if lookahead not in special:none (0)
#        [capture] as none (0)
#    LSQ => ¬sqesc LSQ
#        (5 => ¬18, [5])
#        if lookahead not in special:none (0)
#        [capture] as none (0)
#    LBQ => ¬rbraceesc LBQ
#        (7 => ¬19, [7])
#        if lookahead not in special:none (0)
#        [capture] as none (0)
#    LDQ => bs LDQESC LDQ
#        (6 => 5, [9 6])
#        if lookahead not in special:none (0)
#         as none (0)
#    LSQ => bs LSQESC LDQ
#        (5 => 5, [8 6])
#        if lookahead not in special:none (0)
#         as none (0)
#    LBQ => bs LBQESC LDQ
#        (7 => 5, [10 6])
#        if lookahead not in special:none (0)
#         as none (0)
#    LDQESC => dqesc 
#        (9 => 17, [])
#        if lookahead not in special:none (0)
#        [capture] as none (0)
#    LSQESC => sqesc 
#        (8 => 18, [])
#        if lookahead not in special:none (0)
#        [capture] as none (0)
#    LBQESC => rbraceesc 
#        (10 => 19, [])
#        if lookahead not in special:none (0)
#        [capture] as none (0)
# State Transitions
#    state 0 has 7 rules starting at offset 0
#    state 1 has 2 rules starting at offset 7
#    state 2 has 3 rules starting at offset 9
#    state 3 has 1 rules starting at offset 12
#    state 4 has 2 rules starting at offset 13
#    state 5 has 3 rules starting at offset 15
#    state 6 has 3 rules starting at offset 18
#    state 7 has 3 rules starting at offset 21
#    state 8 has 1 rules starting at offset 24
#    state 9 has 1 rules starting at offset 25
#    state 10 has 1 rules starting at offset 26
#    state 11 has 12 rules starting at offset 27
#    state 12 has 4 rules starting at offset 39
#    state 13 has 1 rules starting at offset 43
#    state 14 has 2 rules starting at offset 44
#    state 15 has 4 rules starting at offset 46
#    state 16 has 12 rules starting at offset 50
#    state 17 has 4 rules starting at offset 62
#    state 18 has 1 rules starting at offset 66
#    state 19 has 2 rules starting at offset 67
#    state 20 has 2 rules starting at offset 69
#    state 21 has 1 rules starting at offset 71
# Summary:
#    HEADER: bach-cg1
#    22 Parser States / 22 Production Symbols
#    72 State Transitions / Rules
#    21 sets of terminal characters defined by a mapping into 20 chars
# Compiling...
#    State machine compiled to 549 bytes
#    Checksum: 98
# HEX output follows.
626163682d6367311614233d20090d0a282922275b5d3c3e5c275c5b5c2215000000001414010f02
0502060e0f05060014080b01020001070806070809090a0a0b0b0c12140e1010120007070209030c
010d020f0312031503180119011a011b0c27042b012c022e04320c3e044201430245024701030300
ff06000301030000000600ffff00000a04030000000a0300ff060000020bff0400000e0bff000003
ffffff00000301ffff030004ffffff000004ffffff01000402ffff040006ffffff000000ffffff06
000004ffff00000effffff00000005ffff0000050806ff00000dffffff00000006ffff0000050906
ff000010ffffff00000007ffff0000050a06ff000012ffffff000011ffffff000013ffffff000004
0bffff000004ffffff010004020bff040002130bff000000020bff0400000e0bff00000012ffff09
00090cffff00000c0f0bff00000d060bff00000e050bff00000f070bff0000040cffff00000d060b
ff00000e050bff00000f070bff0000090cffff000000ffffff0700000effff0000040fffff000000
0210ff0400000e10ff00000010ffff0b00021410ff0000000210ff0400000e10ff00000010ffff0b
000012ffff09000911ffff00000c0f10ff00000bffffff00000410ffff00000d0610ff00000e0510
ff00000f0710ff00000411ffff00000d0610ff00000e0510ff00000f0710ff00000911ffff000000
ffffff0700000effff000000ffffff0700000effff00000bffffff000062
